{
  "compilerOptions": {
    "allowJs": true,
    "checkJs": false,
    "strict": true,
    "alwaysStrict": true,
    "target": "ES2021",
    "module": "commonJS",
    "moduleResolution": "node",
    "skipLibCheck": true,
    "lib": [
      "es2021",
      "ES2022.Error",
      "ES2022.Object"
    ],
    // We don't make use of tslib helpers, all syntax used is supported by target engine
    "importHelpers": false,
    "noEmitHelpers": true,
    // Never emit error filled code
    "noEmitOnError": true,
    "outDir": "lib",
    // We want the sourcemaps in a separate file
    "inlineSourceMap": false,
    "sourceMap": true,
    // API-Extractor uses declaration maps to report problems in source, no need to distribute
    "declaration": true,
    "declarationMap": true,
    // we include sources in the release
    "inlineSources": false,
    // Prevents web types from being suggested by vscode.
    "types": [
      "node"
    ],
    "forceConsistentCasingInFileNames": true,
    "noImplicitOverride": true,
    "noImplicitReturns": true,
    // TODO(NODE-3659): Enable useUnknownInCatchVariables and add type assertions or remove unnecessary catch blocks
    "useUnknownInCatchVariables": false
  },
  "ts-node": {
    "transpileOnly": true,
    "compiler": "typescript-cached-transpile"
  },
  "include": [
    "src/**/*"
  ]
}
// This file is used by the TypeScript compiler to compile the source code in the `src` directory.
// It specifies the compiler options and the files to include in the compilation.
// The output will be placed in the `lib` directory.
// The `ts-node` section is used by ts-node to transpile the code on the fly, using a cached transpile strategy for performance.
// The `include` section specifies that all files in the `src` directory should be included in the compilation.
// The `compilerOptions` section specifies various options for the TypeScript compiler, such as the target ECMAScript version, module system,
// and strictness settings. It also specifies that declaration files should be generated, and that source maps should be created for debugging purposes.
// The `types` option is set to `node` to prevent web types from being suggested by VSCode, ensuring that only Node.js types are used.
// The `forceConsistentCasingInFileNames` option is set to true to ensure that file names
// are consistently cased across the project, which is important for cross-platform compatibility.
// The `noImplicitOverride` option is set to true to ensure that methods that override a
// base class method must explicitly use the `override` keyword, improving code clarity and preventing accidental overrides.
// The `noImplicitReturns` option is set to true to ensure that all code paths in a function return a value, preventing potential runtime errors.
// The `useUnknownInCatchVariables` option is set to false to allow catch variables to be of type `any`, which is useful for legacy code that may not handle unknown types properly.
// This can be revisited in the future to improve type safety by enabling `useUnknownInCatchVariables` and adding type assertions or removing unnecessary catch blocks.
// The `skipLibCheck` option is set to true to skip type checking of declaration files, which can speed up the compilation process and reduce errors related to third-party libraries.
// The `noEmitHelpers` option is set to true to prevent the TypeScript compiler from emitting helper functions, as the code does not rely on them.
// The `noEmitOnError` option is set to true to ensure that no output files are generated if there are any compilation errors, preventing the release of error